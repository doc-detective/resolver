openapi: 3.0.0
info:
  title: "YAML Test API"
  version: "1.0.0"
  description: "A simple API for testing OpenAPI YAML input support"
servers:
  - url: "https://api.example.com/v1"
x-doc-detective:
  server: "https://test-server.example.com"
  validateSchema: true
paths:
  /pets:
    get:
      operationId: listPets
      summary: "List all pets"
      parameters:
        - name: limit
          in: query
          description: "Maximum number of pets to return"
          required: false
          schema:
            type: integer
            format: int32
            example: 10
      responses:
        '200':
          description: "A list of pets"
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      operationId: createPet
      summary: "Create a pet"
      x-doc-detective:
        before: ["listPets"]
        validateSchema: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
            example:
              name: "Fluffy"
              type: "cat"
              age: 3
      responses:
        '201':
          description: "Pet created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: "pet-123"
                name: "Fluffy"
                type: "cat"
                age: 3
  /pets/{petId}:
    get:
      operationId: getPet
      summary: "Get a pet by ID"
      parameters:
        - name: petId
          in: path
          description: "ID of the pet to get"
          required: true
          schema:
            type: string
          example: "pet-123"
      responses:
        '200':
          description: "Pet details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    delete:
      operationId: deletePet
      summary: "Delete a pet"
      x-doc-detective:
        after: ["listPets"]
      parameters:
        - name: petId
          in: path
          description: "ID of the pet to delete"
          required: true
          schema:
            type: string
          example: "pet-123"
      responses:
        '204':
          description: "Pet deleted"
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: ["dog", "cat", "bird"]
        age:
          type: integer
    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        type:
          type: string
          enum: ["dog", "cat", "bird"]
        age:
          type: integer
    Pagination:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer